{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl,"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw ← h,\r\nrefl,"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw add_succ,\r\nrefl,"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d hd,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ 0 d,\r\nrw hd,\r\nrefl,"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with n hd,\r\n rw add_zero b,\r\n rw add_zero (a + b),\r\n refl,\r\n rw add_succ b n,\r\n rw add_succ a (b+n),\r\n rw add_succ (a+b) n,\r\n rw hd,\r\n refl,\r\n \r\n \r\n \r\n\r\n \r\n\r\n\r\n\r\n"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with b hd,\r\nrw add_zero (succ a),\r\nrw add_zero a,\r\nrefl,\r\nrw add_succ (succ a) b,\r\nrw add_succ a b,\r\nrw hd,\r\nrefl,\r\n\r\n\r\n"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with b hi,\r\nrw add_zero a,\r\nrw zero_add a,\r\nrefl,\r\nrw succ_add,\r\nrw add_succ,\r\nrw ← hi,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "induction n with n hi,\r\nrw zero_add 1,\r\nrw one_eq_succ_zero,\r\nrefl,\r\nrw succ_add,\r\nrw ← hi,\r\nrefl\r\n\r\n"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "induction c with c hi,\r\nrw add_zero (a + b),\r\nrw add_zero a,\r\nrefl,\r\n\r\nrw add_succ (a + b) c,\r\nrw add_succ a c,\r\nrw succ_add (a+c) b,\r\nrw ← hi,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with m hi,\r\nrw mul_zero 0,\r\nrefl,\r\n\r\nrw mul_succ 0 m,\r\nrw hi, \r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw mul_succ,\r\nrw mul_zero,\r\nrw zero_add,\r\nrefl,\r\n\r\n\r\n"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero, -- No começo me pareceu melhor.\r\ninduction m with m hi,\r\nrw mul_zero,\r\nrefl,\r\n\r\nrw mul_succ,\r\n-- rw hi one_eq_succ_zero,\r\nrw hi,\r\nrw add_succ m 0,\r\nrw add_zero m,\r\nrefl,\r\n\r\n\r\n"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with b hi,\r\n-- Base: \r\nrw mul_zero t,\r\nrw add_zero,\r\nrw add_zero, -- Não consegui dar target\r\nrefl,\r\n-- Passo Indutivo: \r\nrw add_succ a b,\r\nrw mul_succ t (a+b),\r\nrw hi,\r\nrw mul_succ t b,\r\nrw add_assoc (t*a) (t*b) t,\r\nrefl,\r\n\r\n\r\n\r\n"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with c hc,\r\n-- Base:\r\nrw mul_zero (a * b),\r\nrw mul_zero b,\r\nrw mul_zero a,\r\nrefl,\r\n-- Passo indutivo:\r\nrw mul_succ,\r\nrw mul_succ,\r\n-- ((a * b) * c) + (a * b)\r\n-- a * ((ac) + b)\r\nrw mul_add,\r\nrw ← hc,\r\nrefl,\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm (a*b) b,\r\n-- ← \r\ninduction b with b' hb,\r\n-- Base:\r\nrw mul_zero,\r\nrw mul_zero,\r\nsimp,\r\n\r\n-- Passo indutivo:\r\nrw mul_succ,\r\nrw add_succ,\r\nrw hb,\r\nrw add_assoc,\r\nrw add_comm,\r\nrw ← add_succ,\r\nrw mul_succ,\r\nrw add_comm (succ b') (a * b' + a),\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction t with t' ht,\r\n-- Base:\r\nrw mul_zero,\r\nrw mul_zero,\r\nrw mul_zero,\r\nrw add_zero,\r\nrefl,\r\n-- Passo Indutivo:\r\nrw mul_succ,\r\nrw ht,\r\nrw mul_succ,\r\nrw mul_succ,\r\nrw add_comm (b * t') b,\r\nsimp,\r\n-- rw <- add_assoc a b (b * t'),\r\n\r\n\r\n--simp,\r\n"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with k hk,\r\n-- Base:\r\nrw zero_mul,\r\nrw mul_zero,\r\nrefl,\r\n-- Passo indutivo:\r\nrw mul_succ,\r\nrw succ_mul,\r\nrw hk,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with c hc,\r\n-- Base:\r\nrw mul_zero,\r\nrw mul_zero,\r\nrw mul_zero,\r\nrefl,\r\n-- Passo indutivo:\r\nrw mul_succ,\r\nrw mul_succ,\r\nrw mul_add,\r\nrw mul_add,\r\nrw hc,\r\nrw mul_comm a b,\r\nrefl,\r\n\r\n\r\n\r\n"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rw pow_zero,\r\nrefl,"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ,\r\nrw mul_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw pow_succ,\r\nrw pow_zero, -- sim, eu fiz do jeito mais longo XD!\r\nrw one_eq_succ_zero,\r\nrw succ_mul,\r\nrw zero_mul,\r\nrw zero_add,\r\nrefl,"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with m hm,\r\n-- Base:\r\nrw pow_zero,\r\nrefl,\r\n-- Passo Indutivo:\r\nrw pow_succ,\r\nrw mul_one,\r\nrw hm,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction m with m hm,\r\n\r\n-- Base:\r\nrw zero_add,\r\nrw pow_zero,\r\nrw one_mul,\r\nrefl,\r\n\r\n-- Passo Indutivo:\r\nrw succ_add,\r\nrw pow_succ,\r\nrw hm,\r\nrw pow_succ,\r\nsimp,\r\n\r\n\r\n"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with n hn,\r\n-- Base:\r\nrw pow_zero,\r\nrw pow_zero,\r\nrw pow_zero,\r\nrw mul_one,\r\nrefl,\r\n-- Passo Indutivo:\r\nrw pow_succ,\r\nrw hn,\r\nrw pow_succ,\r\nrw pow_succ,\r\nsimp,\r\n\r\n\r\n\r\n\r\n"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with n hn,\r\n-- Base:\r\nrw pow_zero,\r\nrw mul_zero,\r\nrw pow_zero,\r\nrefl,\r\n\r\n--Passo Indutivo:\r\nrw pow_succ,\r\nrw hn,\r\nrw mul_succ,\r\nrw pow_add,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,\r\nrw one_eq_succ_zero,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_zero,\r\nrw one_mul,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_zero,\r\nrw pow_zero,\r\nrw one_mul,\r\nrw one_mul,\r\nrw succ_mul,\r\nrw succ_mul,\r\nrw zero_mul,\r\nrw zero_add,\r\nrw add_mul,\r\nrw add_mul,\r\nrw mul_add,\r\nrw mul_add, \r\n-- (a b c : mynat) : (a + b) + c = a + (b + c)\r\n--w add_assoc <- (a * b) (b * a) ( b * b),\r\n--rw add_comm (b * a) (b * b),\r\n--rw <- add_assoc (a * b) ( b * b) (b * a),\r\nsimp,\r\n"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro n,\r\nexact 727*n+727,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "--exact l(j(h(p))),\r\nhave q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "--exact l(j(h(p))),\r\nhave q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro f,\r\nintro h, \r\nintro p,\r\n--have t:P -> Q := f(h), TEM PARENTESES IMPLICITOS!!!!! \r\nhave j := f(p),\r\nexact j(h(p)),\r\n-- have j : Q → R := f p,\r\n\r\n\r\n\r\n"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intro p, \r\nintro q,\r\nintro r,\r\nexact q(p(r)),"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intros f h p,\r\nexact h(f(p)),\r\n--apply h,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\nhave b := f1 a,\r\nhave c := f2 b,\r\nhave d := f5 c,\r\nhave e := f8 d,\r\nhave h := f9 e,\r\nhave j := f11 h,\r\nhave l := f15 j,\r\nexact l,\r\n\r\n"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nexact p,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "--exact l(j(h(p))),\r\nhave q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "--exact l(j(h(p))),\r\nhave q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "--intros f h,\r\nintros f h p,\r\n--have j : Q → R := f p,\r\n--have r := j h p,\r\napply f,\r\nexact p,\r\nexact h p,"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\r\nintro hqr,\r\nintro p,\r\nhave q :Q := hpq p, \r\nhave r :R := hqr q,\r\nexact r,"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "-- repeat {rw not_iff_imp_false},\r\nintro hpq,\r\nrw not_iff_imp_false Q,\r\nrw not_iff_imp_false P,\r\nintro hq_false,\r\nintro p,\r\napply hq_false,\r\napply hpq,\r\nexact p,\r\n\r\n"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\napply f15,\r\napply f11, -- f9 f8 f5 f2 f1\r\napply f9, \r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact p,\r\nexact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro hpeq,\r\ncases hpeq with p q,\r\nsplit,\r\nexact q,\r\nexact p,"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intro hpeq,\r\nintro hqer,\r\nsplit,\r\ncases hpeq with p q,\r\nexact p,\r\ncases hqer with q r,\r\nexact r,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\n--cases h with p q,\r\nintro h',\r\n--cases h' with q r,\r\ncases h with f q,\r\ncases h' with q' r,\r\nsplit,\r\nintro p,\r\napply q',\r\napply f,\r\nexact p,\r\n-- outra parte:\r\nintro p,\r\napply q,\r\napply r,\r\nexact p,\r\n"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\n--cases h with p q,\r\nintro h',\r\n--cases h' with q r,\r\ncases h with f q,\r\ncases h' with q' r,\r\nsplit,\r\nintro p,\r\napply q',\r\napply f,\r\nexact p,\r\n-- outra parte:\r\nintro p,\r\napply q,\r\napply r,\r\nexact p,\r\n"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro hq,\r\nright,\r\nexact hq,\r\n"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with p q,\r\nright, \r\nexact p,\r\nleft,\r\nexact q,\r\n"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro hp,\r\ncases hp with fp fqour,\r\ncases fqour,\r\nleft,\r\nsplit,\r\nexact fp,\r\nexact fqour,\r\n\r\nright,\r\nsplit,\r\nexact fp,\r\nexact fqour,\r\n\r\nintro h,\r\nsplit,\r\n--parte 1:\r\n  cases h with h1 h2,\r\n  cases h1 with p q,\r\n  exact p,\r\n--parte 2:\r\n  cases h2 with p q,\r\n  exact p,\r\ncases h with h1 h2,\r\n  cases h1 with p q,\r\n    left,\r\n    exact q,\r\n  cases h2 with p r,\r\n    right,\r\n    exact r,\r\n    -- Okay, vou começar a identar!  \r\n\r\n"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw not_iff_imp_false at h,\r\ncases h with p np,\r\nexfalso,\r\napply np,\r\nexact p,\r\n\r\n"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "--rw not_iff_imp_false Q,\r\n--rw not_iff_imp_false P,\r\nby_cases p : P; by_cases q : Q,\r\n--Pt 1:\r\n  intro h,\r\n  intro f,\r\n  exact q,\r\n--Pt 2:\r\n  intro h,\r\n  intro f,\r\n  rw not_iff_imp_false at h,\r\n  rw not_iff_imp_false at h,\r\n  exfalso,\r\n  apply h, \r\n  exact q, -- O QUE ROLOU AQUI???\r\n  exact p,\r\n--Pt 3:\r\n  intro h,\r\n  intro f,\r\n  exfalso,\r\n  apply p,\r\n  exact f,\r\n--Pt 4:\r\n  intro h,\r\n  intro f, -- have j := h q,\r\n  have j := h q,\r\n  rw not_iff_imp_false at j,\r\n  exfalso,\r\n  apply j,\r\n  exact f,\r\n  \r\n"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "have h_inj : a = b :=  succ_inj(hs),\r\nexact h_inj,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,\r\napply succ_inj,\r\nexact h,"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw h,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro h,\r\napply succ_inj,\r\nexact h,\r\nintro h,\r\napply succ_eq_succ_of_eq,\r\nexact h,\r\n--rw h,\r\n--refl,"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "induction t with t ht,\r\n-- Base:\r\nrw add_zero,\r\nrw add_zero,\r\nintro h,\r\nexact h,\r\n-- Passo Indutivo:\r\n--rw add_succ,\r\n--rw add_succ,\r\nintro ht',\r\nrw add_succ a t at ht',\r\nrw add_succ b t at ht',\r\nhave j : a + t = b + t := succ_inj ht',\r\nhave l := ht j,\r\nexact l,\r\n--apply ht,\r\n--exact j,\r\n\r\n\r\n\r\n"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm t a at ⊢,\r\nrw add_comm t b at ⊢,\r\napply add_right_cancel, -- \"Tohmale. Pai é gênio. \" "
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "-- Modo preguiça?\r\nsplit,\r\napply add_right_cancel,\r\nintro hab,\r\ninduction t with t ht,\r\nrw add_zero a,\r\nrw add_zero b,\r\nexact hab,\r\nrw add_succ,\r\nrw add_succ,\r\nrw ht,\r\nrefl,\r\n\r\n\r\n"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "--induction b with b hb,\r\n-- cc,\r\nintro h,\r\nrw <- add_zero a at h,\r\nrw add_assoc at h,\r\nrw zero_add at h,\r\napply add_left_cancel a b 0,\r\nexact h,\r\n\r\n\r\n--refl,\r\n--intro h,\r\n--rw <- add_zero a at h,\r\n--rw add_succ at h,\r\n--rw add_comm at h,\r\n--rw <- add_assoc at h,\r\n--rw add_comm b a at h,\r\n--rw <- add_succ at h,\r\n--rw add_assoc at h,\r\n--rw add_succ at h,\r\n--rw add_zero b at h,\r\n--apply add_left_cancel a (succ b) 0 at h,\r\n"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact zero_ne_succ a,"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with b,\r\nrefl,\r\nrw add_succ at H,\r\nexfalso,\r\napply succ_ne_zero (a + b),\r\nexact H,\r\n\r\n--rw add_succ at H,\r\n--cases b, where b : mynat,\r\n--exfalso,\r\n--apply succ_ne_zero,"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw add_comm a b at h,\r\nexact add_left_eq_zero h, -- TOMALE! PAI É GÊNIO!"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact succ_eq_add_one d,"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "induction n with n hn,\r\nexact zero_ne_succ 0,\r\nintro h,\r\nhave j := succ_inj(h),\r\nexact hn(j),"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "isSolved": true,
      "editorText": "-- Currificado.\r\nintro ha,\r\nintro hb,\r\nintro hab,\r\ninduction b with b' hb',\r\n-- Base:\r\nrw mul_zero at hab, \r\nexact hb(hab),\r\n-- Parte Impossível\r\ninduction a with a' ha',\r\nrw zero_mul at hab,\r\nexact ha(hab),\r\nrw mul_succ at hab,\r\nrw succ_mul at hab,\r\nrw add_succ at hab,\r\napply succ_ne_zero (a' * b' + b' + a'),\r\nexact hab,\r\n"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "induction b with b hb,\r\n-- Base:\r\n-- cc,\r\nright,\r\nrefl,\r\n-- Passo Indutivo:\r\n-- Base 2:\r\ninduction a with a ha,\r\nleft,\r\nrefl,\r\nrw mul_succ at h,\r\nrw add_succ at h,\r\nexfalso,\r\napply succ_ne_zero (succ a * b + a),\r\nexact h,\r\n\r\n"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro h,\r\napply eq_zero_or_eq_zero_of_mul_eq_zero,\r\nexact h,\r\n\r\nintro h,\r\ncases h,\r\nrw h,\r\nrw zero_mul,\r\nrefl,\r\n\r\nrw h,\r\nrw mul_zero,\r\nrefl,\r\n\r\n"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "isSolved": true,
      "editorText": "induction c with c hc generalizing b,\r\n\r\n intro h,\r\n  rw mul_zero at h,\r\n  have j := eq_zero_or_eq_zero_of_mul_eq_zero a b h,\r\n  cases j,\r\n  --caso a = 0\r\n   exfalso,\r\n   apply ha,\r\n   exact j,\r\n\r\n  -- caso b = 0\r\n  rw j,\r\n  refl,\r\n\r\n  -- Final?\r\n  -- teste:\r\n  cases b,\r\n    intro h,\r\n    rw mul_zero at h,\r\n    symmetry at h,\r\n    have j := eq_zero_or_eq_zero_of_mul_eq_zero a (succ c) h,\r\n    cases j,\r\n      exfalso,\r\n      apply ha,\r\n      exact j,\r\n\r\n    symmetry,\r\n    exact j,\r\n\r\n  intro h,\r\n  rw mul_succ at h, \r\n  rw mul_succ at h,   \r\n  have j := add_right_cancel (a * b) a (a * c) h,\r\n  have k :=  hc b j,\r\n  apply succ_eq_succ_of_eq,\r\n  exact k,\r\n\r\n  -- add_right_cancel\r\n  --(a t b : mynat) : a + t = b + t → a = b   \r\n\r\n  \r\n"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "isSolved": true,
      "editorText": "use 1,\r\nrw add_comm,\r\n-- Meu nng bugou e estou refazendo esses inciais.."
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "isSolved": true,
      "editorText": "use 0,\r\nrefl,"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with c hc,\r\nrw hc,\r\nuse c+1,\r\nrefl, -- WTF? \r\n-- Como já to fazendo dnv eu fiz conforme sugerido ali abaixo.\r\n-- Quando eu tentei copiar oq ELE MANDA copiar, lá embaixo, o meu nng bugou. Acho q ele detectou o control c potente. Zoado já q ele msm qm me mandou fazer, ne..."
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "isSolved": true,
      "editorText": "use a,\r\nrw add_comm,\r\nrefl,"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add at hab hbc ⊢,\r\ncases hbc with c hc,\r\ncases hab with d hd,\r\nrw hd at hc,\r\nuse d+c,\r\nrw <- add_assoc,\r\nexact hc,\r\n"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "isSolved": true,
      "editorText": "cases hab with c hc,\r\ncases hba with d hd,\r\nrw hc at hd,\r\nrw add_assoc at hd,\r\nsymmetry at hd,\r\nhave h := eq_zero_of_add_right_eq_self hd,\r\n\r\ncases c,\r\n  symmetry at hc,\r\n  exact hc,\r\n\r\n  rw succ_add at h,\r\n  exfalso,\r\n  apply zero_ne_succ (c + d),\r\n  symmetry at h,\r\n  exact h,\r\n  \r\n "
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "isSolved": true,
      "editorText": "cases a,\r\nrefl,\r\ncases h with z hz,\r\nrw succ_add at hz,\r\nexfalso,\r\napply zero_ne_succ (a + z),\r\nexact hz,\r\n"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "editorText": "sorry"
    }
  ]
}